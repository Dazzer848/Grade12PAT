/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI;

import Backend.Part;
import Backend.inventoryManager;
import Backend.saleManager;
import DBMS.DB;
import java.util.List;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import DBMS.DB;
import java.awt.Color;
import java.sql.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dazzl
 */
public class saleCreation extends javax.swing.JFrame {
    
    //Globl variabls for the class
    private inventoryManager manager;
    
    //Fiters for the inventory
    private String currentCategoryFilter = "";
    private String currentQuantityFilter = "";
    private String currentSortOrder = "";
    
    // An array list which stores the current items in the cart.
    private ArrayList<Part> cartItems = new ArrayList<>();

    /**
     *
     */
    public saleCreation() {
        initComponents();
        //Creates the inventory manager
        this.manager = new inventoryManager();
        
        //Populates the inventory table with no filters
        populateTable("", "", "");
        setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inventoryMainHeader = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inventoryTable = new javax.swing.JTable();
        addPartButton = new javax.swing.JButton();
        inventoryFiltersPanel = new javax.swing.JPanel();
        partTagsLabel = new javax.swing.JLabel();
        engineTagButton = new javax.swing.JToggleButton();
        fuselageTagButton = new javax.swing.JToggleButton();
        wingsTagButton = new javax.swing.JToggleButton();
        paintsTagButton = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        lowQuantityFilterButton = new javax.swing.JToggleButton();
        highQuantityFilterButton = new javax.swing.JToggleButton();
        toReplenishFilterButton = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JSeparator();
        orderByLabel = new javax.swing.JLabel();
        sortAlphaASCOrderByButton = new javax.swing.JToggleButton();
        priceASCOrderButton = new javax.swing.JToggleButton();
        sortAlphaDESCOrderButton = new javax.swing.JToggleButton();
        priceDESCOrderButton = new javax.swing.JToggleButton();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        cartTable = new javax.swing.JTable();
        checkoutButton = new javax.swing.JButton();
        removePartButton = new javax.swing.JButton();
        clearOrderButton = new javax.swing.JButton();
        yourCartHeader = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        inventoryMainHeader.setFont(new java.awt.Font("Candara Light", 1, 36)); // NOI18N
        inventoryMainHeader.setText("INVENTORY");

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));

        inventoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(inventoryTable);

        addPartButton.setFont(new java.awt.Font("Corbel", 1, 18)); // NOI18N
        addPartButton.setText("ADD PART");
        addPartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPartButtonActionPerformed(evt);
            }
        });

        inventoryFiltersPanel.setBackground(new java.awt.Color(0, 0, 0));

        partTagsLabel.setFont(new java.awt.Font("Calibri Light", 1, 18)); // NOI18N
        partTagsLabel.setText("PART TAGS");

        engineTagButton.setText("ENGINE");
        engineTagButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                engineTagButtonActionPerformed(evt);
            }
        });

        fuselageTagButton.setText("FUSELAGE");
        fuselageTagButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fuselageTagButtonActionPerformed(evt);
            }
        });

        wingsTagButton.setText("WINGS");
        wingsTagButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wingsTagButtonActionPerformed(evt);
            }
        });

        paintsTagButton.setText("PAINTS");
        paintsTagButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paintsTagButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Calibri Light", 1, 18)); // NOI18N
        jLabel2.setText("FILTER");

        lowQuantityFilterButton.setText("LOW QTY");
        lowQuantityFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowQuantityFilterButtonActionPerformed(evt);
            }
        });

        highQuantityFilterButton.setText("HIGH QTY");
        highQuantityFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highQuantityFilterButtonActionPerformed(evt);
            }
        });

        toReplenishFilterButton.setText("TO REPLENISH");
        toReplenishFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toReplenishFilterButtonActionPerformed(evt);
            }
        });

        orderByLabel.setFont(new java.awt.Font("Calibri Light", 1, 18)); // NOI18N
        orderByLabel.setText("ORDER BY");

        sortAlphaASCOrderByButton.setText("NAME ( A- Z )");
        sortAlphaASCOrderByButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortAlphaASCOrderByButtonActionPerformed(evt);
            }
        });

        priceASCOrderButton.setText("PRICE ASC");
        priceASCOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceASCOrderButtonActionPerformed(evt);
            }
        });

        sortAlphaDESCOrderButton.setText("NAME ( Z- A )");
        sortAlphaDESCOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortAlphaDESCOrderButtonActionPerformed(evt);
            }
        });

        priceDESCOrderButton.setText("PRICE DESC");
        priceDESCOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceDESCOrderButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout inventoryFiltersPanelLayout = new javax.swing.GroupLayout(inventoryFiltersPanel);
        inventoryFiltersPanel.setLayout(inventoryFiltersPanelLayout);
        inventoryFiltersPanelLayout.setHorizontalGroup(
            inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inventoryFiltersPanelLayout.createSequentialGroup()
                .addGroup(inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inventoryFiltersPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator3)
                            .addComponent(jSeparator1)
                            .addComponent(jSeparator2)
                            .addGroup(inventoryFiltersPanelLayout.createSequentialGroup()
                                .addComponent(lowQuantityFilterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(highQuantityFilterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(inventoryFiltersPanelLayout.createSequentialGroup()
                                .addGroup(inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(sortAlphaASCOrderByButton, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                                    .addComponent(sortAlphaDESCOrderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(priceASCOrderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(priceDESCOrderButton, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inventoryFiltersPanelLayout.createSequentialGroup()
                                .addGroup(inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(engineTagButton, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                                    .addComponent(wingsTagButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(paintsTagButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(fuselageTagButton, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)))))
                    .addGroup(inventoryFiltersPanelLayout.createSequentialGroup()
                        .addGroup(inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(inventoryFiltersPanelLayout.createSequentialGroup()
                                .addGap(94, 94, 94)
                                .addComponent(orderByLabel))
                            .addGroup(inventoryFiltersPanelLayout.createSequentialGroup()
                                .addGap(109, 109, 109)
                                .addComponent(jLabel2))
                            .addGroup(inventoryFiltersPanelLayout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addComponent(partTagsLabel)))
                        .addGap(0, 94, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inventoryFiltersPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(toReplenishFilterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(77, 77, 77))
        );
        inventoryFiltersPanelLayout.setVerticalGroup(
            inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inventoryFiltersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(partTagsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(engineTagButton)
                    .addComponent(fuselageTagButton))
                .addGap(18, 18, 18)
                .addGroup(inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wingsTagButton)
                    .addComponent(paintsTagButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lowQuantityFilterButton)
                    .addComponent(highQuantityFilterButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addComponent(toReplenishFilterButton)
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(orderByLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(priceASCOrderButton)
                    .addComponent(sortAlphaASCOrderByButton))
                .addGap(18, 18, 18)
                .addGroup(inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sortAlphaDESCOrderButton)
                    .addComponent(priceDESCOrderButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(265, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(inventoryFiltersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 726, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addPartButton, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inventoryFiltersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addComponent(addPartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        cartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(cartTable);

        checkoutButton.setFont(new java.awt.Font("Corbel", 1, 18)); // NOI18N
        checkoutButton.setText("CHECKOUT");
        checkoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutButtonActionPerformed(evt);
            }
        });

        removePartButton.setFont(new java.awt.Font("Corbel", 1, 18)); // NOI18N
        removePartButton.setText("REMOVE PART");
        removePartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removePartButtonActionPerformed(evt);
            }
        });

        clearOrderButton.setFont(new java.awt.Font("Corbel", 1, 18)); // NOI18N
        clearOrderButton.setText("CLEAR ORDER");
        clearOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearOrderButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1002, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkoutButton, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                    .addComponent(removePartButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                    .addComponent(clearOrderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 12, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(removePartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(clearOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(checkoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        yourCartHeader.setFont(new java.awt.Font("Candara Light", 1, 36)); // NOI18N
        yourCartHeader.setText("YOUR CART");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(518, 518, 518)
                                .addComponent(inventoryMainHeader))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(529, 529, 529)
                                .addComponent(yourCartHeader)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inventoryMainHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(yourCartHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void engineTagButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_engineTagButtonActionPerformed
        if (engineTagButton.isSelected()) {

            //Deselect other category buttons
            fuselageTagButton.setSelected(false);
            wingsTagButton.setSelected(false);
            paintsTagButton.setSelected(false);
            currentCategoryFilter = "ENGINE";

            // Change background color to green
            engineTagButton.setBackground(Color.GREEN);
        } else {
            currentCategoryFilter = "";

            //  Reset background color to default
            engineTagButton.setBackground(Color.white);
        }

        // Reset background colors of other buttons
        fuselageTagButton.setBackground(Color.white);
        wingsTagButton.setBackground(Color.white);
        paintsTagButton.setBackground(Color.white);

        //Repoplates table
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);

    }//GEN-LAST:event_engineTagButtonActionPerformed

    private void fuselageTagButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fuselageTagButtonActionPerformed
        if (fuselageTagButton.isSelected()) {

            //Deselect other category buttons
            engineTagButton.setSelected(false);
            wingsTagButton.setSelected(false);
            paintsTagButton.setSelected(false);
            currentCategoryFilter = "FUSELAGE";

            //Change background color to green
            fuselageTagButton.setBackground(Color.GREEN);
        } else {
            currentCategoryFilter = "";

            // Reset background color to default
            fuselageTagButton.setBackground(Color.white);
        }

        //Reset background colors of other buttons
        engineTagButton.setBackground(Color.white);
        wingsTagButton.setBackground(Color.white);
        paintsTagButton.setBackground(Color.white);

        //Repopulates table
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);
    }//GEN-LAST:event_fuselageTagButtonActionPerformed

    private void wingsTagButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wingsTagButtonActionPerformed
        if (wingsTagButton.isSelected()) {

            // Deselect other category buttons
            engineTagButton.setSelected(false);
            fuselageTagButton.setSelected(false);
            paintsTagButton.setSelected(false);
            currentCategoryFilter = "WINGS";

            // Change background color to green
            wingsTagButton.setBackground(Color.GREEN);
        } else {
            currentCategoryFilter = "";

            // Reset background color to default
            wingsTagButton.setBackground(Color.white);
        }

        // Reset background colors of other buttons
        engineTagButton.setBackground(Color.white);
        fuselageTagButton.setBackground(Color.white);
        paintsTagButton.setBackground(Color.white);

        //Repopulates table
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);
    }//GEN-LAST:event_wingsTagButtonActionPerformed

    private void paintsTagButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paintsTagButtonActionPerformed
        if (paintsTagButton.isSelected()) {
            // Deselect other category buttons
            engineTagButton.setSelected(false);
            fuselageTagButton.setSelected(false);
            wingsTagButton.setSelected(false);
            currentCategoryFilter = "PAINTS";

            // Change background color to green
            paintsTagButton.setBackground(Color.GREEN);
        } else {
            currentCategoryFilter = "";

            // Reset background color to default
            paintsTagButton.setBackground(Color.white);
        }

        // Reset background colors of other buttons
        engineTagButton.setBackground(Color.white);
        fuselageTagButton.setBackground(Color.white);
        wingsTagButton.setBackground(Color.white);

        //Re-populates table
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);
    }//GEN-LAST:event_paintsTagButtonActionPerformed

    private void highQuantityFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highQuantityFilterButtonActionPerformed
        if (highQuantityFilterButton.isSelected()) {
            // Deselect other quantity filter buttons
            lowQuantityFilterButton.setSelected(false);
            toReplenishFilterButton.setSelected(false);
            currentQuantityFilter = "HIGH";

            // Change background color to green
            highQuantityFilterButton.setBackground(Color.GREEN);
        } else {
            currentQuantityFilter = "";

            // Reset background color to default
            highQuantityFilterButton.setBackground(Color.white);
        }

        // Reset background colors of other buttons
        lowQuantityFilterButton.setBackground(Color.white);
        toReplenishFilterButton.setBackground(Color.white);

        //Repopulates table
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);
    }//GEN-LAST:event_highQuantityFilterButtonActionPerformed

    private void lowQuantityFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowQuantityFilterButtonActionPerformed
        if (lowQuantityFilterButton.isSelected()) {

            // Deselect other quantity filter buttons
            highQuantityFilterButton.setSelected(false);
            toReplenishFilterButton.setSelected(false);
            currentQuantityFilter = "LOW";

            // Change background color to green
            lowQuantityFilterButton.setBackground(Color.GREEN);
        } else {
            currentQuantityFilter = "";

            // Reset background color to default
            lowQuantityFilterButton.setBackground(Color.white);
        }

        // Reset background colors of other buttons
        highQuantityFilterButton.setBackground(Color.white);
        toReplenishFilterButton.setBackground(Color.white);

        //Repopulates table
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);
    }//GEN-LAST:event_lowQuantityFilterButtonActionPerformed

    private void toReplenishFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toReplenishFilterButtonActionPerformed
        if (toReplenishFilterButton.isSelected()) {
            // Deselect other quantity filter buttons
            lowQuantityFilterButton.setSelected(false);
            highQuantityFilterButton.setSelected(false);
            currentQuantityFilter = "TO_REPLENISH";

            // Change background color to green
            toReplenishFilterButton.setBackground(Color.GREEN);
        } else {
            currentQuantityFilter = "";

            // Reset background color to default
            toReplenishFilterButton.setBackground(Color.white);
        }

        // Reset background colors of other buttons
        lowQuantityFilterButton.setBackground(Color.white);
        highQuantityFilterButton.setBackground(Color.white);

        //Repopulates table
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);
    }//GEN-LAST:event_toReplenishFilterButtonActionPerformed

    private void priceASCOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceASCOrderButtonActionPerformed
        if (priceASCOrderButton.isSelected()) {

            // Deselect other sorting buttons
            priceDESCOrderButton.setSelected(false);
            sortAlphaASCOrderByButton.setSelected(false);
            sortAlphaDESCOrderButton.setSelected(false);
            currentSortOrder = "PRICE_ASC";

            // Change background color to green
            priceASCOrderButton.setBackground(Color.GREEN);
        } else {
            currentSortOrder = "";

            // Reset background color to default
            priceASCOrderButton.setBackground(Color.white);
        }

        // Reset background colors of other buttons
        priceDESCOrderButton.setBackground(Color.white);
        sortAlphaASCOrderByButton.setBackground(Color.white);
        sortAlphaDESCOrderButton.setBackground(Color.white);

        //Repopulates table
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);
    }//GEN-LAST:event_priceASCOrderButtonActionPerformed

    private void priceDESCOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceDESCOrderButtonActionPerformed
        if (priceDESCOrderButton.isSelected()) {

            // Deselect other sorting buttons
            priceASCOrderButton.setSelected(false);
            sortAlphaASCOrderByButton.setSelected(false);
            sortAlphaDESCOrderButton.setSelected(false);
            currentSortOrder = "PRICE_DESC";

            // Change background color to green
            priceDESCOrderButton.setBackground(Color.GREEN);
        } else {
            currentSortOrder = "";

            // Reset background color to default
            priceDESCOrderButton.setBackground(Color.white);
        }

        // Reset background colors of other buttons
        priceASCOrderButton.setBackground(Color.white);
        sortAlphaASCOrderByButton.setBackground(Color.white);
        sortAlphaDESCOrderButton.setBackground(Color.white);

        //Repopulates table
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);
    }//GEN-LAST:event_priceDESCOrderButtonActionPerformed

    private void sortAlphaASCOrderByButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortAlphaASCOrderByButtonActionPerformed
        if (sortAlphaASCOrderByButton.isSelected()) {

            // Deselect other sorting buttons
            priceASCOrderButton.setSelected(false);
            priceDESCOrderButton.setSelected(false);
            sortAlphaDESCOrderButton.setSelected(false);
            currentSortOrder = "NAME_ASC";

            // Change background color to green
            sortAlphaASCOrderByButton.setBackground(Color.GREEN);
        } else {
            currentSortOrder = "";

            // Reset background color to default
            sortAlphaASCOrderByButton.setBackground(Color.white);
        }

        // Reset background colors of other buttons
        priceASCOrderButton.setBackground(Color.white);
        priceDESCOrderButton.setBackground(Color.white);
        sortAlphaDESCOrderButton.setBackground(Color.white);

        //Repopulates table
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);
    }//GEN-LAST:event_sortAlphaASCOrderByButtonActionPerformed

    private void sortAlphaDESCOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortAlphaDESCOrderButtonActionPerformed
        if (sortAlphaDESCOrderButton.isSelected()) {

            // Deselect other sorting buttons
            priceASCOrderButton.setSelected(false);
            priceDESCOrderButton.setSelected(false);
            sortAlphaASCOrderByButton.setSelected(false);
            currentSortOrder = "NAME_DESC";

            // Change background color to green
            sortAlphaDESCOrderButton.setBackground(Color.GREEN);
        } else {
            currentSortOrder = "";

            // Reset background color to default
            sortAlphaDESCOrderButton.setBackground(Color.white);
        }

        // Reset background colors of other buttons
        priceASCOrderButton.setBackground(Color.white);
        priceDESCOrderButton.setBackground(Color.white);
        sortAlphaASCOrderByButton.setBackground(Color.white);

        //Repopulates table
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);
    }//GEN-LAST:event_sortAlphaDESCOrderButtonActionPerformed

    private void addPartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPartButtonActionPerformed
        
        //Get;s the selected row from the table
        int selectedRow = inventoryTable.getSelectedRow();
        
        //If no part is selected display an error message
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a part to add.");
            return;
        }

        //get the part id in the selected row
        int partID = Integer.parseInt(inventoryTable.getValueAt(selectedRow, 0).toString());
        
        //Finds the part object using the inventory manager
        Part inventoryPart = manager.findPartByID(partID);

        // If the manager reports null, then there is an error and the part does not exist
        if (inventoryPart == null) {
            JOptionPane.showMessageDialog(this, "Selected part not found.");
            return;
        }
        
        // There is no stock of the current object
        if (inventoryPart.getQuantity() <= 0) {
            JOptionPane.showMessageDialog(this, "Selected part is out of stock.");
            return;
        }

        //Reduces the quantity of the part in the inventory by 1 to reflect it beign added to the cart
        inventoryPart.updateQuantity(-1);
        //Adds the part to the cart
        addToCart(inventoryPart);
        
        //Repopulates both tables to reflect the updated cases for each of the inventorys
        populateCartTable();
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);
    }//GEN-LAST:event_addPartButtonActionPerformed

    private void removePartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removePartButtonActionPerformed

        //Get's the current;y se;ected row of the table
        int selectedRow = cartTable.getSelectedRow();
        
        // If a row is not selected, prompt the user with an error
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a part to remove.");
            return;
        }
        
        //Get the partID from the currently selected line of the table.
        int partID = Integer.parseInt(cartTable.getValueAt(selectedRow, 0).toString());
        
        //Creates cartPart object
        Part cartPart = null;
        
        //A for each loop which goes through each item and does the following
        for (Part part : cartItems) {
            
            //Ensures that the part Id is equal to that of the part we are looking for
            if (part.getPartID() == partID) {
                // Adds this part to the cart
                cartPart = part;
                break;
            }
        }

        //This is the error case, if a part is not found an error message is displaued
        if (cartPart == null) {
            JOptionPane.showMessageDialog(this, "Selected part not found in cart.");
            return;
        }
        
        //Set's the quantity of the current part in the cart to negative one to ensure that the cart items table reflect it. 
        cartPart.setQuantity(cartPart.getQuantity() - 1);
        
        //If the part is equal to zero, or goes below zero, it removes the part from the cart Jtable
        if (cartPart.getQuantity() <= 0) {
            cartItems.remove(cartPart);
        }
        
        //Creates an inventory part object which then finds the part based off the cartPart ID
        Part inventoryPart = manager.findPartByID(partID);
        
        //If it found that this part is infact real the quanitites are updated
        if (inventoryPart != null) {
            inventoryPart.updateQuantity(1);
        }
        
        //Re populates the table to showcase he removed part
        populateCartTable();
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);

    }//GEN-LAST:event_removePartButtonActionPerformed

    private void clearOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearOrderButtonActionPerformed
        // Initiates a for each loop which enacts on each item.
        for (Part cartPart : cartItems) {
            //Finds the part in the inventory to which the cart part will update
            Part inventoryPart = manager.findPartByID(cartPart.getPartID());
            
            //If it is found in the invetory then the inventory part is updated by the quanityt of the parts that were in the cart
            if (inventoryPart != null) {
                
                //Get's the quantiy of items that were in the cart and updates the inventory to add back that same amount of parts
                inventoryPart.updateQuantity(cartPart.getQuantity());
            }
        }

        //Calls upon the clear method
        cartItems.clear();
        
        //Repopulates the table to showcases the changes.
        populateCartTable();
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);
    }//GEN-LAST:event_clearOrderButtonActionPerformed

    private void checkoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutButtonActionPerformed
        //checks if the users cart is empty, if so display a prompt
        if (cartItems.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Your cart is empty.");
            return;
        }

        //Get's the CLIENTID registered to this sale
        int clientID = Integer.parseInt(JOptionPane.showInputDialog("Please specify client ID")); // FOR TESTNG PURPOSES THIS REMIAINS 1, WE NEED TO INPUT THE ACTUAL CLIENT ID IN HERE
        //The total for the sale
        int totalAmount = 0;
        
        //Does a for each loop to calcualte the total of each item
        for (Part part : cartItems) {
            totalAmount += part.getPrice() * part.getQuantity();
        }
        
        // Created a new slaemanager obkect to manage the sale
        saleManager saleMgr = new saleManager();
        //Creates the sale using the inputted details
        saleMgr.createSale(new ArrayList<>(cartItems), totalAmount, clientID);
        
        //Clears the users cart
        cartItems.clear();

        //Repupulates the table to relfect the changes
        populateCartTable();
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);
        JOptionPane.showMessageDialog(this, "Checkout complete. Sale recorded.");
    }//GEN-LAST:event_checkoutButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(saleCreation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(saleCreation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(saleCreation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(saleCreation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new saleCreation().setVisible(true);
            }
        });
    }
    
    //Method used to populate the inventory table
    private void populateTable(String categoryFilter, String quantityFilter, String sortOrder) {
        DefaultTableModel tableModel = new DefaultTableModel();

        try {

            // Connects to the database
            DB.connect();

            //The query used
            String query = "SELECT parts.part_id, parts.part_name, parts.price, parts.category, "
                    + "COALESCE(inventory.quantity, 0) AS quantity "
                    + "FROM parts "
                    + "LEFT JOIN inventory ON parts.part_id = inventory.part_id";

            //Creates an array list which is then used to build the filter conditions
            List<String> conditions = new ArrayList<>();
            
            //Checks if the filter is on, if it is build the new SQL query
            if (categoryFilter != null && !categoryFilter.isEmpty()) {
                conditions.add("parts.category = '" + categoryFilter + "'");
            }
            
            //Checks if the catogory filter buttons are clicked, if so build new sql statment
            if (quantityFilter != null && !quantityFilter.isEmpty()) {
                
                // Switcch case based off the currently selected filters, builds the new query
                switch (quantityFilter) {
                    case "LOW":
                        conditions.add("quantity > 0 AND quantity <= 10");
                        break;
                    case "HIGH":
                        conditions.add("quantity > 10");
                        break;
                    case "TO_REPLENISH":
                        conditions.add("quantity = 0");
                        break;

                }
            }
            
            //Checks to see if there are condition buttons clicked, if so join them to this current query in order to build a compound query
            if (!conditions.isEmpty()) {
                query += " WHERE " + String.join(" AND ", conditions);
            }

            //Add ORDER BY clause based on sortOrder
            if (sortOrder != null && !sortOrder.isEmpty()) {
                switch (sortOrder) {
                    case "PRICE_ASC":
                        query += " ORDER BY parts.price ASC";
                        break;
                    case "PRICE_DESC":
                        query += " ORDER BY parts.price DESC";
                        break;
                    case "NAME_ASC":
                        query += " ORDER BY parts.part_name ASC";
                        break;
                    case "NAME_DESC":
                        query += " ORDER BY parts.part_name DESC";
                        break;
                }
            }

            //Executes the query
            ResultSet resultSet = DB.query(query);

            // Get metadata to add column names
            ResultSetMetaData metaData = resultSet.getMetaData();
            int columnCount = metaData.getColumnCount();

            // Add column names to the table model
            for (int i = 1; i <= columnCount; i++) {
                tableModel.addColumn(metaData.getColumnName(i));
            }

            // Add rows to the table model
            while (resultSet.next()) {
                Object[] rowData = new Object[columnCount];
                for (int i = 1; i <= columnCount; i++) {
                    rowData[i - 1] = resultSet.getObject(i);
                }
                tableModel.addRow(rowData);
            }

            // Set the model to your JTable
            inventoryTable.setModel(tableModel);

            // Close the resultSet
            resultSet.close();

        } catch (ClassNotFoundException | SQLException pleaseDontGiveMeErrors) {
            pleaseDontGiveMeErrors.printStackTrace();
        }
    }

    //Method which returns the Current category that is being filtered by.
    private String getCurrentCategoryFilter() {
        if (engineTagButton.isSelected()) {
            return "ENGINE";
        } else if (fuselageTagButton.isSelected()) {
            return "FUSELAGE";
        } else if (wingsTagButton.isSelected()) {
            return "WINGS";
        } else if (paintsTagButton.isSelected()) {
            return "PAINTS";
        } else {
            return "";
        }
    }
    
    //A method to add items to the cart which then helps build the JTABLE
    private void addToCart(Part partToAdd) {
        //A boolean to store if a part is in a cart or not.
        boolean partExistsInCart = false;
        
        //A for each loop that checks if the item is already in the cart if so add the part to the corect and as such increases it's quanity in the cart
        for (Part cartPart : cartItems) {
            if (cartPart.getPartID() == partToAdd.getPartID()) {
                //Increases the quantity of the items in the cart
                cartPart.setQuantity(cartPart.getQuantity() + 1);
                //Set's the boolean to true
                partExistsInCart = true;
                break;
            }
        }
        
        //If the item is not in the cart, make a new entry into the table
        if (!partExistsInCart) {
            
            //Adds the correct attributes to the JTable to ensure it works correctly.
            Part cartPart = new Part(
                    partToAdd.getPartID(),
                    partToAdd.getName(),
                    partToAdd.getPrice(),
                    partToAdd.getCatogory(),
                    1
            );
            // aDds the itme to the cart part array list.
            cartItems.add(cartPart);
        }
    }
    
    // The method used to create a visual representation in the form of a jtable of the users parts
    private void populateCartTable() {
        //Set's the tables default model
        DefaultTableModel tableModel = new DefaultTableModel();
        
        //Adds the required collumms for the part data
        tableModel.addColumn("Part ID");
        tableModel.addColumn("Part Name");
        tableModel.addColumn("Price");
        tableModel.addColumn("Category");
        tableModel.addColumn("Quantity");

        //Does a for each loop to ensure each part in the cart items array list is added to the table
        for (Part part : cartItems) {
            Object[] rowData = new Object[]{
                part.getPartID(),
                part.getName(),
                part.getPrice(),
                part.getCatogory(),
                part.getQuantity()
            };
            
            //Adds a row for the next part to be entered into
            tableModel.addRow(rowData);
        }
        
        //sets the table model
        cartTable.setModel(tableModel);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPartButton;
    private javax.swing.JTable cartTable;
    private javax.swing.JButton checkoutButton;
    private javax.swing.JButton clearOrderButton;
    private javax.swing.JToggleButton engineTagButton;
    private javax.swing.JToggleButton fuselageTagButton;
    private javax.swing.JToggleButton highQuantityFilterButton;
    private javax.swing.JPanel inventoryFiltersPanel;
    private javax.swing.JLabel inventoryMainHeader;
    private javax.swing.JTable inventoryTable;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JToggleButton lowQuantityFilterButton;
    private javax.swing.JLabel orderByLabel;
    private javax.swing.JToggleButton paintsTagButton;
    private javax.swing.JLabel partTagsLabel;
    private javax.swing.JToggleButton priceASCOrderButton;
    private javax.swing.JToggleButton priceDESCOrderButton;
    private javax.swing.JButton removePartButton;
    private javax.swing.JToggleButton sortAlphaASCOrderByButton;
    private javax.swing.JToggleButton sortAlphaDESCOrderButton;
    private javax.swing.JToggleButton toReplenishFilterButton;
    private javax.swing.JToggleButton wingsTagButton;
    private javax.swing.JLabel yourCartHeader;
    // End of variables declaration//GEN-END:variables
}
