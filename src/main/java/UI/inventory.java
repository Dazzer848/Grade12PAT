/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI;

import Backend.Part;
import Backend.inventoryManager;
import DBMS.DB;
import java.util.List;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import DBMS.DB;
import java.awt.Color;
import java.sql.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dazzl
 * MUST FIX THE TABLE NOT UPDATING AFTER EDITING THE PART
 */
public class inventory extends javax.swing.JFrame {

    //Global variables of the program
    private inventoryManager manager;
    
    //The filters that will be used in the inventory table
    private String currentCategoryFilter = "";
    private String currentQuantityFilter = "";
    private String currentSortOrder = "";

    /**
     *
     */
    //Bob the builder can he fix it!
    public inventory() {
        initComponents();
        // mKAES the inventory manager object
        this.manager = new inventoryManager();
        
        //Populates the table for the first time with no filters
        populateTable("", "", "");
        setLocationRelativeTo(null); 

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inventoryMainHeader = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inventoryTable = new javax.swing.JTable();
        AddButton = new javax.swing.JButton();
        removeOneButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        inventoryFiltersPanel = new javax.swing.JPanel();
        partTagsLabel = new javax.swing.JLabel();
        engineTagButton = new javax.swing.JToggleButton();
        fuselageTagButton = new javax.swing.JToggleButton();
        wingsTagButton = new javax.swing.JToggleButton();
        paintsTagButton = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        lowQuantityFilterButton = new javax.swing.JToggleButton();
        highQuantityFilterButton = new javax.swing.JToggleButton();
        toReplenishFilterButton = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JSeparator();
        orderByLabel = new javax.swing.JLabel();
        sortAlphaASCOrderByButton = new javax.swing.JToggleButton();
        priceASCOrderButton = new javax.swing.JToggleButton();
        sortAlphaDESCOrderButton = new javax.swing.JToggleButton();
        priceDESCOrderButton = new javax.swing.JToggleButton();
        jSeparator3 = new javax.swing.JSeparator();
        advancedSearchLabel = new javax.swing.JLabel();
        partIDLabel = new javax.swing.JLabel();
        partIDEntryTextField = new javax.swing.JTextField();
        partNameLabel = new javax.swing.JLabel();
        partNameEntryField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        inventoryMainHeader.setFont(new java.awt.Font("Candara Light", 1, 36)); // NOI18N
        inventoryMainHeader.setText("INVENTORY");

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));

        inventoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(inventoryTable);

        AddButton.setFont(new java.awt.Font("Corbel", 1, 18)); // NOI18N
        AddButton.setText("ADD");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        removeOneButton.setFont(new java.awt.Font("Corbel", 1, 18)); // NOI18N
        removeOneButton.setText("REMOVE");
        removeOneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeOneButtonActionPerformed(evt);
            }
        });

        editButton.setFont(new java.awt.Font("Corbel", 1, 18)); // NOI18N
        editButton.setText("EDIT PART");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Corbel", 1, 18)); // NOI18N
        deleteButton.setText("DELETE");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        inventoryFiltersPanel.setBackground(new java.awt.Color(0, 0, 0));

        partTagsLabel.setFont(new java.awt.Font("Calibri Light", 1, 18)); // NOI18N
        partTagsLabel.setText("PART TAGS");

        engineTagButton.setText("ENGINE");
        engineTagButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                engineTagButtonActionPerformed(evt);
            }
        });

        fuselageTagButton.setText("FUSELAGE");
        fuselageTagButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fuselageTagButtonActionPerformed(evt);
            }
        });

        wingsTagButton.setText("WINGS");
        wingsTagButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wingsTagButtonActionPerformed(evt);
            }
        });

        paintsTagButton.setText("PAINTS");
        paintsTagButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paintsTagButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Calibri Light", 1, 18)); // NOI18N
        jLabel2.setText("FILTER");

        lowQuantityFilterButton.setText("LOW QTY");
        lowQuantityFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowQuantityFilterButtonActionPerformed(evt);
            }
        });

        highQuantityFilterButton.setText("HIGH QTY");
        highQuantityFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highQuantityFilterButtonActionPerformed(evt);
            }
        });

        toReplenishFilterButton.setText("TO REPLENISH");
        toReplenishFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toReplenishFilterButtonActionPerformed(evt);
            }
        });

        orderByLabel.setFont(new java.awt.Font("Calibri Light", 1, 18)); // NOI18N
        orderByLabel.setText("ORDER BY");

        sortAlphaASCOrderByButton.setText("NAME ( A- Z )");
        sortAlphaASCOrderByButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortAlphaASCOrderByButtonActionPerformed(evt);
            }
        });

        priceASCOrderButton.setText("PRICE ASC");
        priceASCOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceASCOrderButtonActionPerformed(evt);
            }
        });

        sortAlphaDESCOrderButton.setText("NAME ( Z- A )");
        sortAlphaDESCOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortAlphaDESCOrderButtonActionPerformed(evt);
            }
        });

        priceDESCOrderButton.setText("PRICE DESC");
        priceDESCOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceDESCOrderButtonActionPerformed(evt);
            }
        });

        advancedSearchLabel.setFont(new java.awt.Font("Calibri Light", 1, 18)); // NOI18N
        advancedSearchLabel.setText("ADVANCED SEARCH");

        partIDLabel.setText("ID:");

        partIDEntryTextField.setText("jTextField1");

        partNameLabel.setText("NAME:");

        partNameEntryField.setText("jTextField2");

        jButton1.setText("SEARCH");

        javax.swing.GroupLayout inventoryFiltersPanelLayout = new javax.swing.GroupLayout(inventoryFiltersPanel);
        inventoryFiltersPanel.setLayout(inventoryFiltersPanelLayout);
        inventoryFiltersPanelLayout.setHorizontalGroup(
            inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inventoryFiltersPanelLayout.createSequentialGroup()
                .addGroup(inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inventoryFiltersPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inventoryFiltersPanelLayout.createSequentialGroup()
                                .addComponent(partIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(partIDEntryTextField))
                            .addComponent(jSeparator3)
                            .addComponent(jSeparator1)
                            .addComponent(jSeparator2)
                            .addGroup(inventoryFiltersPanelLayout.createSequentialGroup()
                                .addComponent(lowQuantityFilterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(highQuantityFilterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(inventoryFiltersPanelLayout.createSequentialGroup()
                                .addGroup(inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(sortAlphaASCOrderByButton, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                                    .addComponent(sortAlphaDESCOrderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(priceASCOrderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(priceDESCOrderButton, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)))
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inventoryFiltersPanelLayout.createSequentialGroup()
                                .addGroup(inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(engineTagButton, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                                    .addComponent(wingsTagButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(paintsTagButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(fuselageTagButton, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)))
                            .addGroup(inventoryFiltersPanelLayout.createSequentialGroup()
                                .addComponent(partNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(partNameEntryField))))
                    .addGroup(inventoryFiltersPanelLayout.createSequentialGroup()
                        .addGroup(inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(inventoryFiltersPanelLayout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(advancedSearchLabel))
                            .addGroup(inventoryFiltersPanelLayout.createSequentialGroup()
                                .addGap(94, 94, 94)
                                .addComponent(orderByLabel))
                            .addGroup(inventoryFiltersPanelLayout.createSequentialGroup()
                                .addGap(109, 109, 109)
                                .addComponent(jLabel2))
                            .addGroup(inventoryFiltersPanelLayout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addComponent(partTagsLabel)))
                        .addGap(0, 57, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inventoryFiltersPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(toReplenishFilterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(77, 77, 77))
        );
        inventoryFiltersPanelLayout.setVerticalGroup(
            inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inventoryFiltersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(partTagsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(engineTagButton)
                    .addComponent(fuselageTagButton))
                .addGap(18, 18, 18)
                .addGroup(inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wingsTagButton)
                    .addComponent(paintsTagButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lowQuantityFilterButton)
                    .addComponent(highQuantityFilterButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addComponent(toReplenishFilterButton)
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(orderByLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(priceASCOrderButton)
                    .addComponent(sortAlphaASCOrderByButton))
                .addGap(18, 18, 18)
                .addGroup(inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sortAlphaDESCOrderButton)
                    .addComponent(priceDESCOrderButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(advancedSearchLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(partIDLabel)
                    .addComponent(partIDEntryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(inventoryFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(partNameEntryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(partNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(inventoryFiltersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 726, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AddButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeOneButton, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                    .addComponent(editButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addComponent(AddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76)
                .addComponent(removeOneButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74)
                .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71)
                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(inventoryFiltersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 647, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(inventoryMainHeader)
                .addGap(526, 526, 526))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inventoryMainHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(63, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    //The filter button which ensures on Parts of the Engine catogory are shown
    private void engineTagButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_engineTagButtonActionPerformed
        if (engineTagButton.isSelected()) {
            
            // Deselect other category buttons
            fuselageTagButton.setSelected(false);
            wingsTagButton.setSelected(false);
            paintsTagButton.setSelected(false);
            currentCategoryFilter = "ENGINE";

            // Change background color to green
            engineTagButton.setBackground(Color.GREEN);
        } else {
            currentCategoryFilter = "";

            // Reset background color to default
            engineTagButton.setBackground(Color.white);
        }

        // Reset background colors of other buttons
        fuselageTagButton.setBackground(Color.white);
        wingsTagButton.setBackground(Color.white);
        paintsTagButton.setBackground(Color.white);

        //Re-poplates table
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);

    }//GEN-LAST:event_engineTagButtonActionPerformed
    
       //The filter button which ensures on Parts of the fuselafe catogory are shown
    private void fuselageTagButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fuselageTagButtonActionPerformed
        if (fuselageTagButton.isSelected()) {
            
            //Deselect other category buttons
            engineTagButton.setSelected(false);
            wingsTagButton.setSelected(false);
            paintsTagButton.setSelected(false);
            currentCategoryFilter = "FUSELAGE";

            //Change background color to green
            fuselageTagButton.setBackground(Color.GREEN);
        } else {
            currentCategoryFilter = "";

            // Reset background color to default
            fuselageTagButton.setBackground(Color.white);
        }

        //Reset background colors of other buttons
        engineTagButton.setBackground(Color.white);
        wingsTagButton.setBackground(Color.white);
        paintsTagButton.setBackground(Color.white);

        //Re-populates table
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);
    }//GEN-LAST:event_fuselageTagButtonActionPerformed
   //The filter button which ensures on Parts of the wings catogory are shown
    private void wingsTagButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wingsTagButtonActionPerformed
        if (wingsTagButton.isSelected()) {
           
            // Deselect other category buttons
            engineTagButton.setSelected(false);
            fuselageTagButton.setSelected(false);
            paintsTagButton.setSelected(false);
            currentCategoryFilter = "WINGS";

            // Change background color to green
            wingsTagButton.setBackground(Color.GREEN);
        } else {
            currentCategoryFilter = "";

            // Reset background color to default
            wingsTagButton.setBackground(Color.white);
        }

        // Reset background colors of other buttons
        engineTagButton.setBackground(Color.white);
        fuselageTagButton.setBackground(Color.white);
        paintsTagButton.setBackground(Color.white);

        //Re-populates table
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);
    }//GEN-LAST:event_wingsTagButtonActionPerformed
   //The filter button which ensures on Parts of the Engine catogory are shown
    private void paintsTagButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paintsTagButtonActionPerformed
        if (paintsTagButton.isSelected()) {
            // Deselect other category buttons
            engineTagButton.setSelected(false);
            fuselageTagButton.setSelected(false);
            wingsTagButton.setSelected(false);
            currentCategoryFilter = "PAINTS";

            // Change background color to green
            paintsTagButton.setBackground(Color.GREEN);
        } else {
            currentCategoryFilter = "";

            // Reset background color to default
            paintsTagButton.setBackground(Color.white);
        }

        // Reset background colors of other buttons
        engineTagButton.setBackground(Color.white);
        fuselageTagButton.setBackground(Color.white);
        wingsTagButton.setBackground(Color.white);

        //Re-populates table
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);
    }//GEN-LAST:event_paintsTagButtonActionPerformed
   // Filters the table so that only items with a high quanity are shown
    private void highQuantityFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highQuantityFilterButtonActionPerformed
        if (highQuantityFilterButton.isSelected()) {
            //Deselect other quantity filter buttons
            lowQuantityFilterButton.setSelected(false);
            toReplenishFilterButton.setSelected(false);
            currentQuantityFilter = "HIGH";

            // Change background color to green
            highQuantityFilterButton.setBackground(Color.GREEN);
        } else {
            currentQuantityFilter = "";

            // Reset background color to default
            highQuantityFilterButton.setBackground(Color.white);
        }

        // Reset background colors of other buttons
        lowQuantityFilterButton.setBackground(Color.white);
        toReplenishFilterButton.setBackground(Color.white);

        //Re-populates table
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);
    }//GEN-LAST:event_highQuantityFilterButtonActionPerformed

       // Filters the table so that only items with a low quanity are shown
    private void lowQuantityFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowQuantityFilterButtonActionPerformed
        if (lowQuantityFilterButton.isSelected()) {
            
            // Deselect other quantity filter buttons
            highQuantityFilterButton.setSelected(false);
            toReplenishFilterButton.setSelected(false);
            currentQuantityFilter = "LOW";

            // Change background color to green
            lowQuantityFilterButton.setBackground(Color.GREEN);
        } else {
            currentQuantityFilter = "";

            // Reset background color to default
            lowQuantityFilterButton.setBackground(Color.white);
        }

        // Reset background colors of other buttons
        highQuantityFilterButton.setBackground(Color.white);
        toReplenishFilterButton.setBackground(Color.white);

        //Re-populates table
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);
    }//GEN-LAST:event_lowQuantityFilterButtonActionPerformed
    //Filters the table so that only items with nothing lefts is shown
    private void toReplenishFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toReplenishFilterButtonActionPerformed
        if (toReplenishFilterButton.isSelected()) {
            // Deselect other quantity filter buttons
            lowQuantityFilterButton.setSelected(false);
            highQuantityFilterButton.setSelected(false);
            currentQuantityFilter = "TO_REPLENISH";

            // Change background color to green
            toReplenishFilterButton.setBackground(Color.GREEN);
        } else {
            currentQuantityFilter = "";

            // Reset background color to default
            toReplenishFilterButton.setBackground(Color.white);
        }

        // Reset background colors of other buttons
        lowQuantityFilterButton.setBackground(Color.white);
        highQuantityFilterButton.setBackground(Color.white);

        //Re-populates table
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);
    }//GEN-LAST:event_toReplenishFilterButtonActionPerformed

       //Order the jTable to showcase price in ascending order
    private void priceASCOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceASCOrderButtonActionPerformed
        if (priceASCOrderButton.isSelected()) {
            
            // Deselect other sorting buttons
            priceDESCOrderButton.setSelected(false);
            sortAlphaASCOrderByButton.setSelected(false);
            sortAlphaDESCOrderButton.setSelected(false);
            currentSortOrder = "PRICE_ASC";

            // Change background color to green
            priceASCOrderButton.setBackground(Color.GREEN);
        }
        //set's the current sort order to nothing if the button is deselected
        else {
            currentSortOrder = "";

            // Reset background color to default
            priceASCOrderButton.setBackground(Color.white);
        }

        // Reset background colors of other buttons
        priceDESCOrderButton.setBackground(Color.white);
        sortAlphaASCOrderByButton.setBackground(Color.white);
        sortAlphaDESCOrderButton.setBackground(Color.white);

        //Re-populates table
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);
    }//GEN-LAST:event_priceASCOrderButtonActionPerformed

    //Set's the JTable to display the obkects in Descing order
    private void priceDESCOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceDESCOrderButtonActionPerformed
        if (priceDESCOrderButton.isSelected()) {
            
            //Deselect other sorting buttons
            priceASCOrderButton.setSelected(false);
            sortAlphaASCOrderByButton.setSelected(false);
            sortAlphaDESCOrderButton.setSelected(false);
            currentSortOrder = "PRICE_DESC";

            // Change background color to green
            priceDESCOrderButton.setBackground(Color.GREEN);
        } else {
            currentSortOrder = "";

            // Reset background color to default
            priceDESCOrderButton.setBackground(Color.white);
        }

        // Reset background colors of other buttons
        priceASCOrderButton.setBackground(Color.white);
        sortAlphaASCOrderByButton.setBackground(Color.white);
        sortAlphaDESCOrderButton.setBackground(Color.white);

        //Re-populates table
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);
    }//GEN-LAST:event_priceDESCOrderButtonActionPerformed

    //Sorts the Jtable by alphabetical order
    private void sortAlphaASCOrderByButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortAlphaASCOrderByButtonActionPerformed
        if (sortAlphaASCOrderByButton.isSelected()) {
            
            // Deselect other sorting buttons
            priceASCOrderButton.setSelected(false);
            priceDESCOrderButton.setSelected(false);
            sortAlphaDESCOrderButton.setSelected(false);
            currentSortOrder = "NAME_ASC";

            // Change background color to green
            sortAlphaASCOrderByButton.setBackground(Color.GREEN);
        } else {
            currentSortOrder = "";

            // Reset background color to default
            sortAlphaASCOrderByButton.setBackground(Color.white);
        }

        // Reset background colors of other buttons
        priceASCOrderButton.setBackground(Color.white);
        priceDESCOrderButton.setBackground(Color.white);
        sortAlphaDESCOrderButton.setBackground(Color.white);

        //Re-populates table
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);
    }//GEN-LAST:event_sortAlphaASCOrderByButtonActionPerformed

    //Sorts the opoosite way of alphabetical 
    private void sortAlphaDESCOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortAlphaDESCOrderButtonActionPerformed
        if (sortAlphaDESCOrderButton.isSelected()) {
            
            // Deselect other sorting buttons
            priceASCOrderButton.setSelected(false);
            priceDESCOrderButton.setSelected(false);
            sortAlphaASCOrderByButton.setSelected(false);
            currentSortOrder = "NAME_DESC";

            // Change background color to green
            sortAlphaDESCOrderButton.setBackground(Color.GREEN);
        } else {
            currentSortOrder = "";

            // Reset background color to default
            sortAlphaDESCOrderButton.setBackground(Color.white);
        }

        // Reset background colors of other buttons
        priceASCOrderButton.setBackground(Color.white);
        priceDESCOrderButton.setBackground(Color.white);
        sortAlphaASCOrderByButton.setBackground(Color.white);

        //Re-populates table
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);
    }//GEN-LAST:event_sortAlphaDESCOrderButtonActionPerformed

    //This button adds item's to the inventory
    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed

        //Check if a row is selected
        int selectedRow = inventoryTable.getSelectedRow();
        if (selectedRow == -1) {
            
            // No row selected, show an errors message
            JOptionPane.showMessageDialog(this, "Please select a part from the table.");
            return;
        }

        //Get the part ID fromt he selected row
        int partId = (int) inventoryTable.getValueAt(selectedRow, 0);

        //Updates the number of parts in the table
        manager.updatePartQty(partId, 1);

        // Refresh the table
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);

        JOptionPane.showMessageDialog(this, "Quantity updated successfully.");
    }//GEN-LAST:event_AddButtonActionPerformed

    private void removeOneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeOneButtonActionPerformed

        // Check if a row is selected
        int selectedRow = inventoryTable.getSelectedRow();
        if (selectedRow == -1) {
            // No row selected, show a message
            JOptionPane.showMessageDialog(this, "Please select a part from the table.");
            return;
        }

        //eGet's the part ID fromt he currently selected part
        int partId = Integer.parseInt(inventoryTable.getValueAt(selectedRow, 0).toString());

        //Defines the success of the operation
        boolean success = manager.updatePartQty(partId, -1);

        if (success) {
            // Refresh the table
            populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);

            JOptionPane.showMessageDialog(this, "Quantity decreased by 1.");
        } else {
            //Report error on quantity
            JOptionPane.showMessageDialog(this, "Cannot decrease quantity below zero.");
        }
    }//GEN-LAST:event_removeOneButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed

// Check if a row is selected
        int selectedRow = inventoryTable.getSelectedRow();
        if (selectedRow == -1) {
            //No row selected, show a message
            JOptionPane.showMessageDialog(this, "Please select a part from the table.");
            return;
        }

        //Get's the Part ID of the currently selected part.
        int partId = Integer.parseInt(inventoryTable.getValueAt(selectedRow, 0).toString());

        //Asks for the users confrimation
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this part?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            boolean success = manager.deletePart(partId);

            if (success) {
                //Refresh the table
                populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);

                //Show success message
                JOptionPane.showMessageDialog(this, "Part deleted successfully.");
            } else {
                //Show eerro message
                JOptionPane.showMessageDialog(this, "Failed to delete part.");
            }
        } 
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
    // Check if a row is selected
    int selectedRow = inventoryTable.getSelectedRow();
    if (selectedRow == -1) {
        // No row selected, show a message
        JOptionPane.showMessageDialog(this, "Please select a part from the table.");
        return;
    }

    //Get the part ID of the selected part
    int partId = Integer.parseInt(inventoryTable.getValueAt(selectedRow, 0).toString());

    //Find the selected part
    Part selectedPart = manager.findPartByID(partId);
    if (selectedPart != null) {
        // Create an instance of editPanel and pass the selected part
        editPanel editPanelInstance = new editPanel(selectedPart);
        editPanelInstance.setVisible(true);


        // Repopulates the table with the currently applied filters 
        populateTable(currentCategoryFilter, currentQuantityFilter, currentSortOrder);
    } else {
        JOptionPane.showMessageDialog(this, "Part not found.");
    }   
    }//GEN-LAST:event_editButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new inventory().setVisible(true);
            }
        });
    }

    private void populateTable(String categoryFilter, String quantityFilter, String sortOrder) {
        DefaultTableModel tableModel = new DefaultTableModel();

        try {

            //Connects to the database
            DB.connect();

            //Query
            String query = "SELECT parts.part_id, parts.part_name, parts.price, parts.category, "
                    + "COALESCE(inventory.quantity, 0) AS quantity "
                    + "FROM parts "
                    + "LEFT JOIN inventory ON parts.part_id = inventory.part_id";

            //Builds the WHERE clause based on filters
            List<String> conditions = new ArrayList<>();

            //If there is a defined filter, this clause adds the spcae for that filter to be applied to the query which is then executed. This is catogory
            if (categoryFilter != null && !categoryFilter.isEmpty()) {
                //Adds the filter to SQL
                conditions.add("parts.category = '" + categoryFilter + "'");
            }
            
            //Creates a swithc case for the filters based on the filters for quantity.
            if (quantityFilter != null && !quantityFilter.isEmpty()) {
                switch (quantityFilter) {
                    case "LOW":
                        conditions.add("quantity > 0 AND quantity <= 10");
                        break;
                    case "HIGH":
                        conditions.add("quantity > 10");
                        break;
                    case "TO_REPLENISH":
                        conditions.add("quantity = 0");
                        break;

                }
            }
            
            //Checks if the conditions array list is empty, if not add in the clauses.
            if (!conditions.isEmpty()) {
                query += " WHERE " + String.join(" AND ", conditions);
            }

            //Add ORDER BY clause based on sortOrder
            if (sortOrder != null && !sortOrder.isEmpty()) {
                switch (sortOrder) {
                    case "PRICE_ASC":
                        query += " ORDER BY parts.price ASC";
                        break;
                    case "PRICE_DESC":
                        query += " ORDER BY parts.price DESC";
                        break;
                    case "NAME_ASC":
                        query += " ORDER BY parts.part_name ASC";
                        break;
                    case "NAME_DESC":
                        query += " ORDER BY parts.part_name DESC";
                        break;
                }
            }

            //Executres the query
            ResultSet resultSet = DB.query(query);

            //Get metadata to add column names
            ResultSetMetaData metaData = resultSet.getMetaData();
            int columnCount = metaData.getColumnCount();

            // Add column names to the table model
            for (int i = 1; i <= columnCount; i++) {
                tableModel.addColumn(metaData.getColumnName(i));
            }

            //Add rows to the table model
            while (resultSet.next()) {
                Object[] rowData = new Object[columnCount];
                for (int i = 1; i <= columnCount; i++) {
                    rowData[i - 1] = resultSet.getObject(i);
                }
                tableModel.addRow(rowData);
            }

            // Set the model to your JTable
            inventoryTable.setModel(tableModel);

            //Shut it down
            resultSet.close();

        } catch (ClassNotFoundException | SQLException pleaseDontGiveMeErrors) {
            pleaseDontGiveMeErrors.printStackTrace();
        }
    }

    //Method which returns the Current category that is being filtered by.
    private String getCurrentCategoryFilter() {
        if (engineTagButton.isSelected()) {
            return "ENGINE";
        } else if (fuselageTagButton.isSelected()) {
            return "FUSELAGE";
        } else if (wingsTagButton.isSelected()) {
            return "WINGS";
        } else if (paintsTagButton.isSelected()) {
            return "PAINTS";
        } else {
            return "";
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JLabel advancedSearchLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JToggleButton engineTagButton;
    private javax.swing.JToggleButton fuselageTagButton;
    private javax.swing.JToggleButton highQuantityFilterButton;
    private javax.swing.JPanel inventoryFiltersPanel;
    private javax.swing.JLabel inventoryMainHeader;
    private javax.swing.JTable inventoryTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JToggleButton lowQuantityFilterButton;
    private javax.swing.JLabel orderByLabel;
    private javax.swing.JToggleButton paintsTagButton;
    private javax.swing.JTextField partIDEntryTextField;
    private javax.swing.JLabel partIDLabel;
    private javax.swing.JTextField partNameEntryField;
    private javax.swing.JLabel partNameLabel;
    private javax.swing.JLabel partTagsLabel;
    private javax.swing.JToggleButton priceASCOrderButton;
    private javax.swing.JToggleButton priceDESCOrderButton;
    private javax.swing.JButton removeOneButton;
    private javax.swing.JToggleButton sortAlphaASCOrderByButton;
    private javax.swing.JToggleButton sortAlphaDESCOrderButton;
    private javax.swing.JToggleButton toReplenishFilterButton;
    private javax.swing.JToggleButton wingsTagButton;
    // End of variables declaration//GEN-END:variables
}
